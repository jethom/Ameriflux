'CR6 Series Datalogger

'Copyright (c) 2002, 2006, 2010 Campbell Scientific, Inc. All rights reserved.

'22 Jun 15
'version 3.2.01


'The following sensors are measured:
'
'IRGASON open path infrared gas analyzer (CO2 and H2O) and three dimensional sonic anemometer head


' The sign convention for the fluxes is positive away from the surface and
'negative towards the surface.
'
' Before computing online fluxes, the datalogger will introduce lags into the
'eddy covariance data to account for the fixed instrument delays. The lags are
'dependent on the instrument setting and/or the scan interval. Search for "Fixed
'inherent lag" and set the delay to the appropriate value. The raw data is not
'lagged.
'
' The site attendant must load in several constants and calibration values.
'Search for the text string "unique" to find the locations where unique
'constants and calibration values are entered.


'*** Unit Definitions ***

'Symbol   Units
'C        Celsius
'degrees  degrees (angle)
'g        grams
'J        Joules
'kg       kilograms
'kPa      kilopascals
'm        meters
'mg       milligrams
'mmol     millimoles
'mol      moles
's        seconds
'umol     micromols
'V        volts
'W        Watts


'*** Station constants.
'Start of Constants Customization Section
Const SCAN_INTERVAL = 100  'Unique value, measurement rate 100 ms (10 Hz) or 50 ms (20 Hz).
Const OUTPUT_INTERVAL = 30 'Unique value, online flux data output interval in minutes.
Const NUM_DAY_CRD = 356    'Unique value, number of days of flux data to store on a 16 GB CF card (44 days = 2 GB). This value will vary with configuration.
Const SDM_PER = 30         'Unique value, default SDM clock speed.


Const EC100_SDM_ADDR = 1             'Unique SDM address for EC100.
Const CO2_SIG_STRGTH_THRESHOLD = 0.7 'Unique value - filter gas analyzer CO2 data when CO2 signal strength is less than CO2_SIG_STRGTH.
Const H2O_SIG_STRGTH_THRESHOLD = 0.7 'Unique value - filter gas analyzer H2O data when H2O signal strength is less than H2O_SIG_STRGTH.
'*** Beginning of EC150 w/ or w/o CSAT3A sonic head wiring ***
'SDM-C1  SDM Data (green)
'SDM-C2  SDM Clock (white)
'SDM-C3  SDM Enable (brown)
'G       SDM reference (black)
'        SDM shield (clear)

'+12V    power (red)
'G       power reference (black)
'        power shield (clear)
'*** End of EC150 w/ or w/o CSAT3A sonic head wiring ***
'End of Constants Customization Section


'POWER IN
'12V     datalogger (red)
'G       datalogger (black)


'EXTERNAL POWER SUPPLY
'+12V    datalogger (red)
'G       datalogger (black)




PipeLineMode

'*** General constants and variables ***
Const OFFSET = 17                                        'An offset delay that will be introduced to the eddy covariance data used to compute online fluxes.
Const SCAN_BUFFER_SIZE = 60*INT (1000/SCAN_INTERVAL)     'Compute a 60 second scan buffer.

Const NUM_DAY_CPU = 1                                              'Number of days of flux data to store on the CPU.
Const FLUX_SIZE_CPU = Ceiling ((NUM_DAY_CPU*1440)/OUTPUT_INTERVAL) 'Size of flux data table on CPU [days].
Const FLUX_SIZE_CRD = Ceiling ((NUM_DAY_CRD*1440)/OUTPUT_INTERVAL) 'Size of flux data table on CRD [days].

Const MU_WPL = 28.97/18.02                               'Ratio of the molecular weight of dry air to that of water vapor.
Const R = 8.3143e-3                                      'Universal gas constant [kPa m^3/(K mol)].
Const RD = R/28.97                                       'Gas constant for dry air [kPa m^3/(K g)].
Const RV = R/18.02                                       'Gas constant for water vapor [kPa m^3/(K g)].
Dim Lv                                                   'Latent heat of vaporization [J/g].
Dim Cp                                                   'Specific heat capacity [J/(kg K)].

Dim dly_data_out(7)                                      'Array used to temporarily store the lagged record.

'Other measurements.
Public panel_tmpr
Public batt_volt
Units panel_tmpr = C
Units batt_volt = V
Public cnr4(4)
Alias cnr4(1)=short_up
Alias cnr4(2)=short_lw
Alias cnr4(3)=long_up
Alias cnr4(4)=long_lw
Public cnr4_res, cnr4_rs_r0
Public cnr4_T_C
Public cnr4_T_K
Const cnr4_alpha=3.9080e-3
Const cnr4_beta=-5.8019e-7

Units short_up=W/m^2
Units short_lw=W/m^2
Units long_up=W/m^2
Units long_lw=W/m^2
Units cnr4_T_C = degC
Units cnr4_T_K = K

' sensitivity units are in microvolts/W/m^2
Const pyra_up_sensitiv=16.12
Const pyra_lw_sensitiv=12.07
Const pyrg_up_sensitiv=6.87
Const pyrg_lw_sensitiv=6.72
' multipier units are W/m^2/millivolt
Const pyra_up_mult=1000/pyra_up_sensitiv
Const pyra_lw_mult=1000/pyra_lw_sensitiv
Const pyrg_up_mult=1000/pyrg_up_sensitiv
Const pyrg_lw_mult=1000/pyrg_lw_sensitiv
Public cnr4_mult(4)
'System power control variables.
Const SYSTEM_PWR_OFF_SET_PT = 10
Const SYSTEM_PWR_DEAD_BAND_WIDTH = 2

'Program working variables.
Dim scan_count As Long                                   'Number scans executed.
Dim slowsequence_finished_f As Boolean                   'Flag used to indicate the SlowSequence has finished its scan.
Dim slowsequence_disable_f As Boolean = TRUE             'Flag used to decimate statistics in main scan.
Dim sys_conf_var_file As Long                            'Filehandle for the file that contains the system configuration variables in the CPU.
Dim sys_conf_var_file_size As Long                       'Size of the system configuration file stored on the CPU.
Dim sys_conf_var(2) = {0,0}                              'Variable saved are:  sonic_azimuth and irga_off_flg
Dim process_time
Dim buff_depth
Dim i As Long                                            'Main scan index variable.
Dim ii As Long                                           'Slow sequence scan index variable.
Dim n = 1
Dim err_message_str As String * 76
Dim value_str(2) As String * 20
Alias value_str(1) = curr_value_str
Alias value_str(2) = prev_value_str
Units process_time = us
Units buff_depth = scans
Units n = samples


'*** Beginning of EC100 configure, zero, and span constants and variables, and subroutine ***
Const BANDWIDTH = 20            '10 = 10 Hz; 20 = 20 Hz
Const DIFFERENTIAL_PRESSURE = 0 '0 = disabled
Const TEMPERATURE_SOURCE = 0    '0 = ambient temperature sensor
Const AUTO_HEATER_CONTROL = -2  '-2 = automatic; -1 = off
Const BB = 0                    'BB = EC100 basic pressure transducer
Const EB = 2                    'EB = EC100 enhanced pressure transducer

Public CO2_span_gas
Public Td_span_gas

Dim config_array(4,2) = {0,BANDWIDTH,3,DIFFERENTIAL_PRESSURE,7,TEMPERATURE_SOURCE,18,AUTO_HEATER_CONTROL}
Dim power_array (1,2) = {21,0}
Dim press_source_array(1,2) = {2,0}   'Pressure source,basic pressure transducer (default).
Dim zero_array(1,2) = {11,1}          'Zero/Span command,set zero value.
Dim span_CO2_array(2,2) = {12,0,11,2} 'CO2 span concentration,0; Zero/Span command,set CO2 span value (default).
Dim span_H2O_array(2,2) = {13,0,11,3} 'H2O span dew point temperature,0; Zero/Span command,set H2O span value (default).
Dim config_result As Long

Public set_press_source_flg As Boolean
Public press_source As Long = 99999
Public do_zero_flg As Boolean
Public do_CO2_span_flg As Boolean
Public do_H2O_span_flg As Boolean
Public irga_off_flg As Boolean
Dim irga_off_bit As Boolean
Dim irga_startup_bit As Boolean
Dim configure_ec100_f As Boolean = TRUE
Dim irga_power_f As Boolean
Dim NAN_cnt As Long
Dim retry_config_f As Boolean
Dim irga_off_flg_prev As Boolean
Dim sec_since_last_cmd


Sub Config (cmd_array(4,2),num_cmd As Long,retry_config_f As Boolean)
  Dim i As Long
  Dim config_result As Long
  Dim save_flash_f As Boolean = FALSE

  For i = 1 To num_cmd
    EC100Configure (config_result,1,cmd_array(i,1),cmd_array(i,2))
    If ( config_result = NAN ) Then ( ExitFor )
    If ( (cmd_array(i,1) = 2) OR (cmd_array(i,1) = 11) ) Then ( save_flash_f = TRUE )
  Next i

  If ( i = num_cmd+1 ) Then
    If ( save_flash_f ) Then ( EC100Configure (config_result,EC100_SDM_ADDR,99,2718) )
    If ( config_result <> NAN ) Then ( retry_config_f = FALSE )
  EndIf

  SetStatus ("SkippedScan",0)
EndSub
'*** End of EC100 configure, zero, and span constants and variables, and subroutine ***


'*** Beginning of CSAT3A sonic head constants, variables, and working data table ***
Public sonic_azimuth                       'Enter sonic azimuth using keyboard after program has compiled (azimuth of the CSAT3(A) negative x-axis see Section 3.2.1 CSAT3A Azimuth in the OPEC manual).
Units sonic_azimuth = degrees

Public sonic(5)
Alias sonic(1) = Ux
Alias sonic(2) = Uy
Alias sonic(3) = Uz
Alias sonic(4) = Ts
Alias sonic(5) = diag_sonic
Public diag_sonic_aggregate As Long
Units Ux = m/s
Units Uy = m/s
Units Uz = m/s
Units Ts = C
Units diag_sonic = arb
Units diag_sonic_aggregate = arb

Dim diag_bits_sonic(6) As Long             'Sonic warning flags.
Alias diag_bits_sonic(1) = sonic_amp_l_f   'Amplitude low warning flag.
Alias diag_bits_sonic(2) = sonic_amp_h_f   'Amplitude high warning flag.
Alias diag_bits_sonic(3) = sonic_sig_lck_f 'Poor signal lock warning flag.
Alias diag_bits_sonic(4) = sonic_del_T_f   'Delta temperature warning flag.
Alias diag_bits_sonic(5) = sonic_aq_sig_f  'Sonic acquiring signals warning flag.
Alias diag_bits_sonic(6) = sonic_cal_err_f 'Signature error in reading CSAT3A sonic head calibration data.
Units diag_bits_sonic = arb
Dim diag_sonic_tmp As Long                 'Temporary variable used to break out the CSAT3A sonic head diagnostic bits.

Dim sonic_irga_raw(12)                     'EC150 w/CSAT3A sonic head (not lagged).

Dim sonic_disable_f As Boolean             'TRUE when CSAT3A sonic head diagnostic warning flags are on or CSAT3A sonic head has not sent data or an SDM signature error is reported.
Dim Ts_absolute                            'Sonic temperature (K).
Dim sonic_azimuth_prev

Dim cov_array_sonic(1,4)                   'Arrays used to hold the input data for the covariance instructions (CSAT3A sonic head).
Dim cov_out_sonic(18)                      'CSAT3A sonic head statistics.
Alias cov_out_sonic(1) = Hs                'Sensible heat flux using sonic temperature.
Alias cov_out_sonic(2) = tau               'Momentum flux.
Alias cov_out_sonic(3) = u_star            'Friction velocity.
Alias cov_out_sonic(4) = Ts_stdev
Alias cov_out_sonic(5) = Ts_Ux_cov
Alias cov_out_sonic(6) = Ts_Uy_cov
Alias cov_out_sonic(7) = Ts_Uz_cov
Alias cov_out_sonic(8) = Ux_stdev
Alias cov_out_sonic(9) = Ux_Uy_cov
Alias cov_out_sonic(10) = Ux_Uz_cov
Alias cov_out_sonic(11) = Uy_stdev
Alias cov_out_sonic(12) = Uy_Uz_cov
Alias cov_out_sonic(13) = Uz_stdev
Alias cov_out_sonic(14) = wnd_spd
Alias cov_out_sonic(15) = rslt_wnd_spd
Alias cov_out_sonic(16) = wnd_dir_sonic
Alias cov_out_sonic(17) = std_wnd_dir
Alias cov_out_sonic(18) = wnd_dir_compass
Units Hs = W/m^2
Units tau = kg/(m s^2)
Units u_star = m/s
Units Ts_stdev = C
Units Ts_Ux_cov = C m/s
Units Ts_Uy_cov = C m/s
Units Ts_Uz_cov = C m/s
Units Ux_stdev = m/s
Units Ux_Uy_cov = (m/s)^2
Units Ux_Uz_cov = (m/s)^2
Units Uy_stdev = m/s
Units Uy_Uz_cov = (m/s)^2
Units Uz_stdev = m/s
Units wnd_spd = m/s
Units rslt_wnd_spd = m/s
Units wnd_dir_sonic = degrees
Units std_wnd_dir = degrees
Units wnd_dir_compass = degrees

DataTable (delay_3d,TRUE,OFFSET)
  TableHide
  Sample (5,sonic_irga_raw(1),IEEE4)
EndTable

DataTable (comp_cov_3d,TRUE,1)
  TableHide
  DataInterval (0,OUTPUT_INTERVAL,Min,1)

  'Compute covariances from CSAT3A sonic head data.
  Covariance (4,cov_array_sonic(1,1),IEEE4,sonic_disable_f,10)
  WindVector (1,Uy,Ux,IEEE4,sonic_disable_f,0,1,2)
EndTable
'*** End of CSAT3A sonic head constants, variables, and working data table ***


'*** Beginning of EC150 constants, variables, and working data table ***
Const DELAY_EC150 = INT (4000/SCAN_INTERVAL/BANDWIDTH) 'Automatically computed lag of the EC150 data.
Const EC150_REC_BCK = OFFSET-DELAY_EC150-1 'Number of records back to align EC150 data. Minus one scan because the SDM instruction is at the end of the program.

Public irga(11)
Alias irga(1) = CO2
Alias irga(2) = H2O
Alias irga(3) = diag_irga
Alias irga(4) = amb_tmpr
Alias irga(5) = amb_press
Alias irga(6) = CO2_sig_strgth
Alias irga(7) = H2O_sig_strgth
Alias irga(8) = Tc
Alias irga(9) = Td
Alias irga(10) = Xc
Alias irga(11) = Xv
Public diag_irga_aggregate As Long
Units CO2 = mg/m^3
Units H2O = g/m^3
Units diag_irga = arb
Units amb_tmpr = C
Units amb_press = kPa
Units CO2_sig_strgth = fraction
Units H2O_sig_strgth = fraction
Units Tc = C
Units Td = C
Units Xc = umol/mol
Units Xv = mmol/mol
Units diag_irga_aggregate = arb

Dim diag_bits_irga(22) As Long                   'Gas analyzer warning flags.
Alias diag_bits_irga(1) = irga_bad_data_f        'Gas analyzer bad data warning flag.
Alias diag_bits_irga(2) = irga_gen_fault_f       'General fault warning flag.
Alias diag_bits_irga(3) = irga_startup_f         'Gas analyzer starting up warning flag.
Alias diag_bits_irga(4) = irga_motor_spd_f       'Gas analyzer motor speed out of bounds warning flag.
Alias diag_bits_irga(5) = irga_tec_tmpr_f        'Thermoelectric cooler temperature out of bounds warning flag.
Alias diag_bits_irga(6) = irga_src_pwr_f         'Gas analyzer source power out of bounds warning flag.
Alias diag_bits_irga(7) = irga_src_tmpr_f        'Gas analyzer source temperature out of bounds warning flag.
Alias diag_bits_irga(8) = irga_src_curr_f        'Gas analyzer source current out of bounds warning flag.
Alias diag_bits_irga(9) = irga_off_f             'Gas analyzer head is powered down.
Alias diag_bits_irga(10) = irga_sync_f           'Gas analyzer not synchronized with home pulse warning flag.
Alias diag_bits_irga(11) = irga_amb_tmpr_f       'Invalid ambient temperature warning flag.
Alias diag_bits_irga(12) = irga_amb_press_f      'Invalid ambient pressure warning flag.
Alias diag_bits_irga(13) = irga_CO2_I_f          'CO2 I out of bounds warning flag.
Alias diag_bits_irga(14) = irga_CO2_Io_f         'CO2 Io out of bounds warning flag.
Alias diag_bits_irga(15) = irga_H2O_I_f          'H2O I out of bounds warning flag.
Alias diag_bits_irga(16) = irga_H2O_Io_f         'H2O Io out of bounds warning flag.
Alias diag_bits_irga(17) = irga_CO2_Io_var_f     'CO2 Io moving variation out of bounds warning flag.
Alias diag_bits_irga(18) = irga_H2O_Io_var_f     'H2O Io moving variation out of bounds warning flag.
Alias diag_bits_irga(19) = irga_CO2_sig_strgth_f 'CO2 signal strength warning flag.
Alias diag_bits_irga(20) = irga_H2O_sig_strgth_f 'H2O signal strength warning flag.
Alias diag_bits_irga(21) = irga_cal_err_f        'Gas analyzer calibration data signature error.
Alias diag_bits_irga(22) = irga_htr_ctrl_off_f   'Gas analyzer heater control disabled by EC100.
Units diag_bits_irga = arb
Dim diag_irga_tmp As Long                        'Temporary variable used to break out the gas analyzer diagnostic bits.

Dim divisor                                 'Temporary variable used to find molar mixing ratio.
Dim irga_disable_f As Boolean               'TRUE when EC150 sends bad data.
Dim sonic_irga_disable_f As Boolean         'TRUE when EC150 or CSAT3A sends bad data.
Dim rho_d_mean                              'Density of dry air used in Webb et al. term [g / m^3].
Dim sigma_wpl                               'Webb et al. sigma = density of water vapor / density of dry air.
Dim Td_tmp

Dim cov_array_cs(3,4)                       'Arrays used to hold the input data for the covariance instructions (EC150 and CSAT3A sonic head).
Dim cov_out_cs(26)                          'EC150 statistics.
Alias cov_out_cs(1) = Fc_wpl                'Carbon dioxide flux (EC150), with Webb et al. term.
Alias cov_out_cs(2) = LE_wpl                'Latent heat flux (EC150), with Webb et al. term.
Alias cov_out_cs(3) = Hc                    'Sensible heat flux using sonic temperature corrected for water vapor measured by the EC150.
Alias cov_out_cs(4) = CO2_stdev
Alias cov_out_cs(5) = CO2_Ux_cov
Alias cov_out_cs(6) = CO2_Uy_cov
Alias cov_out_cs(7) = CO2_Uz_cov
Alias cov_out_cs(8) = H2O_stdev
Alias cov_out_cs(9) = H2O_Ux_cov
Alias cov_out_cs(10) = H2O_Uy_cov
Alias cov_out_cs(11) = H2O_Uz_cov
Alias cov_out_cs(12) = Tc_stdev
Alias cov_out_cs(13) = Tc_Ux_cov
Alias cov_out_cs(14) = Tc_Uy_cov
Alias cov_out_cs(15) = Tc_Uz_cov
Alias cov_out_cs(16) = CO2_mean
Alias cov_out_cs(17) = H2O_mean
Alias cov_out_cs(18) = amb_press_mean
Alias cov_out_cs(19) = Tc_mean              'Sonic temperature corrected for humidity.
Alias cov_out_cs(20) = rho_a_mean
Alias cov_out_cs(21) = Fc_irga              'Carbon dioxide flux (EC150), without Webb et al. term.
Alias cov_out_cs(22) = LE_irga              'Latent heat flux (EC150), without Webb et al. term.
Alias cov_out_cs(23) = CO2_wpl_LE           'Carbon dioxide flux (EC150), Webb et al. term due to latent heat flux.
Alias cov_out_cs(24) = CO2_wpl_H            'Carbon dioxide flux (EC150), Webb et al. term due to sensible heat flux.
Alias cov_out_cs(25) = H2O_wpl_LE           'Latent heat flux (EC150), Webb et al. term due to latent heat flux.
Alias cov_out_cs(26) = H2O_wpl_H            'Latent heat flux (EC150), Webb et al. term due to sensible heat flux.
Units Fc_wpl = mg/(m^2 s)
Units LE_wpl = W/m^2
Units Hc = W/m^2
Units CO2_stdev = mg/m^3
Units CO2_Ux_cov = mg/(m^2 s)
Units CO2_Uy_cov = mg/(m^2 s)
Units CO2_Uz_cov = mg/(m^2 s)
Units H2O_stdev = g/m^3
Units H2O_Ux_cov = g/(m^2 s)
Units H2O_Uy_cov = g/(m^2 s)
Units H2O_Uz_cov = g/(m^2 s)
Units Tc_stdev = C
Units Tc_Ux_cov = C m/s
Units Tc_Uy_cov = C m/s
Units Tc_Uz_cov = C m/s
Units CO2_mean = mg/m^3
Units H2O_mean = g/m^3
Units amb_press_mean = kPa
Units Tc_mean = C
Units rho_a_mean = kg/m^3
Units Fc_irga = mg/(m^2 s)
Units LE_irga = W/m^2
Units CO2_wpl_LE = mg/(m^2 s)
Units CO2_wpl_H = mg/(m^2 s)
Units H2O_wpl_LE = W/m^2
Units H2O_wpl_H = W/m^2

DataTable (delay_cs,TRUE,OFFSET)
  TableHide
  Sample (7,sonic_irga_raw(6),IEEE4)
EndTable

DataTable (comp_cov_cs,TRUE,1)
  TableHide
  DataInterval (0,OUTPUT_INTERVAL,Min,1)

  'Compute covariance of CO2 against sonic wind data.
  Covariance (4,cov_array_cs(1,1),IEEE4,sonic_irga_disable_f,4)
  'Compute covariance of H2O against sonic wind data.
  Covariance (4,cov_array_cs(2,1),IEEE4,sonic_irga_disable_f,4)
  'Compute covariance of Tc (computed fast response temperature) against sonic wind data.
  Covariance (4,cov_array_cs(3,1),IEEE4,sonic_irga_disable_f,4)
  Average (2,CO2,IEEE4,irga_disable_f)
  Average (1,amb_press,IEEE4,FALSE)
  Average (1,Tc,IEEE4,sonic_irga_disable_f)
EndTable


DisplayMenu ("System Control",TRUE)
  MenuItem ("Sonic Azmth",sonic_azimuth)
  MenuItem ("IRGA Off",irga_off_flg)
    MenuPick (True,False)
  SubMenu ("Change Press Source")
    MenuItem ("Select Srce",press_source)
  MenuPick (BB,EB)
    MenuItem ("Set Source",set_press_source_flg)
  MenuPick (True)
  EndSubMenu
  SubMenu ("On Site Zero & Span")
    SubMenu ("Span Concentrations")
      MenuItem ("CO2",CO2_span_gas)
      MenuItem ("Td",Td_span_gas)
    EndSubMenu
    MenuItem ("Do Zero",do_zero_flg)
  MenuPick (True)
    MenuItem ("Do CO2 Span",do_CO2_span_flg)
  MenuPick (True)
    MenuItem ("Do H2O Span",do_H2O_span_flg)
  MenuPick (True)
    DisplayValue ("CO2 um/m dry",Xc)
    DisplayValue ("H2O mm/m dry",Xv)
    DisplayValue ("Td degrees C",Td)
  EndSubMenu
EndMenu
'*** End of EC150 constants, variables, and working data table ***


'*** Output data tables ***
DataTable (flux,TRUE,FLUX_SIZE_CPU)
  DataInterval (0,OUTPUT_INTERVAL,Min,10)
  CardOut (0,FLUX_SIZE_CRD)

  '*** Beginning of CSAT3A sonic head output data ***
  Sample (18,Hs,IEEE4)
  Average (4,Ux,IEEE4,sonic_disable_f)
  Sample (1,sonic_azimuth,IEEE4)
  Totalize (1,n,IEEE4,sonic_disable_f)
  FieldNames ("sonic_samples_Tot")
  Sample (1,diag_sonic_aggregate,IEEE4)
  Totalize (1,n,IEEE4,diag_sonic<>-1)
  FieldNames ("no_sonic_head_Tot")
  Totalize (1,n,IEEE4,diag_sonic<>NAN)
  FieldNames ("no_new_sonic_data_Tot")
  Totalize (1,sonic_amp_l_f,IEEE4,FALSE)
  Totalize (1,sonic_amp_h_f,IEEE4,FALSE)
  Totalize (1,sonic_sig_lck_f,IEEE4,FALSE)
  Totalize (1,sonic_del_T_f,IEEE4,FALSE)
  Totalize (1,sonic_aq_sig_f,IEEE4,FALSE)
  Totalize (1,sonic_cal_err_f,IEEE4,FALSE)
  '*** End of CSAT3A sonic head output data ***

  '*** Beginning of EC150 output data ***
  Sample (17,Fc_wpl,IEEE4)
  Average (1,amb_tmpr,IEEE4,FALSE)
  Sample (9,amb_press_mean,IEEE4)
  Totalize (1,n,IEEE4,irga_disable_f)
  FieldNames ("irga_samples_Tot")
  Sample (1,diag_irga_aggregate,IEEE4)
  Totalize (1,n,IEEE4,diag_irga<>-1)
  FieldNames ("no_irga_head_Tot")
  Totalize (1,n,IEEE4,diag_irga<>NAN)
  FieldNames ("no_new_irga_data_Tot")
  Totalize (1,irga_bad_data_f,IEEE4,FALSE)
  Totalize (1,irga_gen_fault_f,IEEE4,FALSE)
  Totalize (1,irga_startup_f,IEEE4,FALSE)
  Totalize (1,irga_motor_spd_f,IEEE4,FALSE)
  Totalize (1,irga_tec_tmpr_f,IEEE4,FALSE)
  Totalize (1,irga_src_pwr_f,IEEE4,FALSE)
  Totalize (1,irga_src_tmpr_f,IEEE4,FALSE)
  Totalize (1,irga_src_curr_f,IEEE4,FALSE)
  Totalize (1,irga_off_f,IEEE4,FALSE)
  Totalize (1,irga_sync_f,IEEE4,FALSE)
  Totalize (1,irga_amb_tmpr_f,IEEE4,FALSE)
  Totalize (1,irga_amb_press_f,IEEE4,FALSE)
  Totalize (1,irga_CO2_I_f,IEEE4,FALSE)
  Totalize (1,irga_CO2_Io_f,IEEE4,FALSE)
  Totalize (1,irga_H2O_I_f,IEEE4,FALSE)
  Totalize (1,irga_H2O_Io_f,IEEE4,FALSE)
  Totalize (1,irga_CO2_Io_var_f,IEEE4,FALSE)
  Totalize (1,irga_H2O_Io_var_f,IEEE4,FALSE)
  Totalize (1,irga_CO2_sig_strgth_f,IEEE4,FALSE)
  Totalize (1,irga_H2O_sig_strgth_f,IEEE4,FALSE)
  Totalize (1,irga_cal_err_f,IEEE4,FALSE)
  Totalize (1,irga_htr_ctrl_off_f,IEEE4,FALSE)
  Average (1,CO2_sig_strgth,IEEE4,FALSE)
  FieldNames ("CO2_sig_strgth_mean")
  Average (1,H2O_sig_strgth,IEEE4,FALSE)
  FieldNames ("H2O_sig_strgth_mean")
  Totalize (1,n,IEEE4,CO2_sig_strgth>CO2_SIG_STRGTH_THRESHOLD)
  FieldNames ("CO2_sig_strgth_Tot")
  Totalize (1,n,IEEE4,H2O_sig_strgth>H2O_SIG_STRGTH_THRESHOLD)
  FieldNames ("H2O_sig_strgth_Tot")
  '*** End of EC150 output data ***

  '*** Beginning of other output data ***
  Average (1,panel_tmpr,IEEE4,FALSE)
  Average (1,batt_volt,IEEE4,slowsequence_disable_f)
  Average (1,process_time,IEEE4,FALSE)
  Maximum (1,process_time,IEEE4,FALSE,FALSE)
  Maximum (1,buff_depth,IEEE4,FALSE,FALSE)
  Average(1,short_up,IEEE4,slowsequence_disable_f)
  Average(1,short_lw,IEEE4,slowsequence_disable_f)
  Average(1,long_up,IEEE4,slowsequence_disable_f)
  Average(1,long_lw,IEEE4,slowsequence_disable_f)
  Average(1,cnr4_T_C,IEEE4,slowsequence_disable_f)
  '*** End of other output data ***

  Totalize (1,n,IEEE4,slowsequence_disable_f)
  FieldNames ("slowsequence_Tot")
EndTable

'Diagnostic data.
DataTable (diagnostic,TRUE,1)
  Sample (6,sonic_amp_l_f,Boolean)
  Sample (22,irga_bad_data_f,Boolean)
  Sample (1,irga_off_bit,Boolean)
  Sample (1,irga_startup_bit,Boolean)  
EndTable


'System log.
DataTable (sys_log,TRUE,128)
  CardOut (0,1024)

  Sample (1,err_message_str,String)
  FieldNames ("Message")
  Sample (2,curr_value_str,String)
  FieldNames ("Current Value,Previous Value")
EndTable


'Time series data.
DataTable (ts_data,TRUE,-1)
  DataInterval (0,SCAN_INTERVAL,mSec,100)
  TableFile ("CRD:"&Status.SerialNumber(1,1)&".ts_data_",64,-1,0,1,Day,0,0)

  '*** Beginning of CSAT3(A) time series output ***
  Sample (5,sonic_irga_raw(1),IEEE4)
  FieldNames ("Ux,Uy,Uz,Ts,diag_sonic")
  '*** End of CSAT3(A) time series output ***

  '*** Beginning of EC150 time series output ***
  Sample (7,sonic_irga_raw(6),IEEE4)
  FieldNames ("CO2,H2O,diag_irga,amb_tmpr,amb_press,CO2_sig_strgth,H2O_sig_strgth")
  '*** End of EC150 time series output ***
EndTable



'*** Program ***

BeginProg
  ' load the multipliers for the CNR4
    cnr4_mult(1)=pyra_up_mult
    cnr4_mult(2)=pyra_lw_mult
    cnr4_mult(3)=pyrg_up_mult
    cnr4_mult(4)=pyrg_lw_mult
    
  SemaphoreGet (1)
  sys_conf_var_file = FileOpen ("CPU:sys_conf_var.dat","rb",0) 'Check if a file exists.
  sys_conf_var_file_size = FileSize (sys_conf_var_file)
  FileClose (sys_conf_var_file)
  SemaphoreRelease (1)

  Select Case sys_conf_var_file_size
  Case Is = 0                                            'System configuration file does not exist.
    Calfile (sys_conf_var(1),2,"CPU:sys_conf_var.dat",0) 'Store the default values to the file.
  Case Is = 6                                            'Load v3.1 system configuration file size (6 bytes).
    Calfile (sys_conf_var(1),1,"CPU:sys_conf_var.dat",1) 'Read the values from the file.
  Case Is = 10                                           'Load v3.2 system configuration file size (10 bytes).
    Calfile (sys_conf_var(1),2,"CPU:sys_conf_var.dat",1) 'Read the values from the file.
  EndSelect

  sonic_azimuth = sys_conf_var(1)
  sonic_azimuth_prev = sonic_azimuth

  irga_off_flg = sys_conf_var(2)
  irga_off_flg_prev = irga_off_flg

  'Set the SDM clock speed.
  SDMSpeed (SDM_PER)
  Scan (SCAN_INTERVAL,mSec,SCAN_BUFFER_SIZE,0)
    'Datalogger panel temperature.
    PanelTemp (panel_tmpr,250)


    '*** Beginning of EC150 w/ CSAT3A sonic head measurement processing ***
    If ( sonic_irga_raw(8) = NAN ) Then 'The EC150 diagnostic word (diag_irga) is sonic_irga_raw(8).
      NAN_cnt += 1
      configure_ec100_f = FALSE
    Else
      If ( NAN_cnt > 4 ) Then ( configure_ec100_f = TRUE )
      NAN_cnt = 0
    EndIf

    If ( configure_ec100_f ) Then
      Call Config (config_array(1,1),4,configure_ec100_f)
    ElseIf ( irga_power_f ) Then
      Call Config (power_array(1,1),1,irga_power_f)
    ElseIf ( set_press_source_flg ) Then
      press_source_array(1,2) = press_source
      Call Config (press_source_array(1,1),1,set_press_source_flg)
      If ( NOT (set_press_source_flg) ) Then ( EC100Configure (config_result,EC100_SDM_ADDR,99,2718) )
    ElseIf ( do_zero_flg ) Then
      Call Config (zero_array(1,1),1,do_zero_flg)
    ElseIf ( do_CO2_span_flg ) Then
      span_CO2_array(1,2) = CO2_span_gas
      Call Config (span_CO2_array(1,1),2,do_CO2_span_flg)
    ElseIf ( do_H2O_span_flg )
      span_H2O_array(1,2) = Td_span_gas
      Call Config (span_H2O_array(1,1),2,do_H2O_span_flg)
    EndIf

    diag_irga_tmp = IIF ((sonic_irga_raw(8) <> NAN) AND (sonic_irga_raw(8) <> -1),diag_irga,&h3ffefb)
    irga_off_bit = diag_irga_tmp AND &h000100
    irga_startup_bit = diag_irga_tmp AND &h000004

    CallTable delay_3d
    CallTable delay_cs
    '*** End of EC150 w/ CSAT3A sonic head measurement processing ***


    'Save time series data.
    CallTable ts_data


    If ( scan_count >= OFFSET ) Then
      '*** Beginning of CSAT3A sonic head processing ***
      'Load in CSAT3A sonic head data that has been lagged by EC150_REC_BCK scans.
      GetRecord (dly_data_out(1),delay_3d,EC150_REC_BCK)

      Move (Ux,5,dly_data_out(1),5) 'Ux, Uy, Uz, Ts, diag_sonic

      diag_sonic_tmp = IIF ((diag_sonic <> NAN) AND (diag_sonic <> -1),diag_sonic,&h3f)
      diag_sonic_aggregate = diag_sonic_aggregate OR diag_sonic_tmp

      'Extract the six warning flags from the sonic diagnostic word.
      For i = 1 To 6
        diag_bits_sonic(i) = diag_sonic_tmp AND &h1
        diag_sonic_tmp = diag_sonic_tmp >> 1
      Next i

      Ts_absolute = Ts+273.15

      'Filter data in the covariance instruction if the CSAT3A reports bad data.
      sonic_disable_f = (diag_sonic <> 0)

      'Load the arrays that hold the input data for the covariance instructions.
      cov_array_sonic(1,1) = Ts
      Move (cov_array_sonic(1,2),3,Ux,3)
      CallTable comp_cov_3d
      If ( comp_cov_3d.Output(1,1) ) Then
        GetRecord (Ts_stdev,comp_cov_3d,1)

        'Rotate the CSAT3A sonic head RHC system so the negative x-axis points north.
        wnd_dir_compass = (360+sonic_azimuth-wnd_dir_sonic) MOD 360

        'Make the CSAT3A sonic head wind direction fall between 0 to 180 degrees and 0 to -180 degrees.
        If ( wnd_dir_sonic > 180 ) Then ( wnd_dir_sonic = wnd_dir_sonic-360 )

        'Compute online fluxes.
        tau = SQR ((Ux_Uz_cov*Ux_Uz_cov)+(Uy_Uz_cov*Uy_Uz_cov))
        u_star = SQR (tau)

        'Compute the standard deviation from the variance.
        Ts_stdev = SQR (Ts_stdev)
        Ux_stdev = SQR (Ux_stdev)
        Uy_stdev = SQR (Uy_stdev)
        Uz_stdev = SQR (Uz_stdev)
      EndIf
      '*** End of CSAT3A sonic head processing ***


      '*** Beginning of EC150 processing ***
      'Load in the EC150 data that has been lagged by EC150_REC_BCK scans.
      GetRecord (dly_data_out(1),delay_cs,EC150_REC_BCK)

      Move (CO2,7,dly_data_out(1),7) 'CO2, H2O, diag_irga, amb_tmpr, amb_press, CO2_sig_strgth, H2O_sig_strgth

      'Compute the EC150 dew point temperature from the H2O density at atmospheric pressure and shroud temperature.
      Td_tmp = LOG (H2O*R*(amb_tmpr+273.15)/(11.014*(1.00072+3.2e-5*amb_press+5.9e-9*amb_press*amb_tmpr*amb_tmpr))) 'Td_tmp = ln (H2O*R*(T+273.15)/(Mv*0.61121*f)); Mv = 18.02 g/mol, f = 1.00072+3.2e-5*P+5.9e-9*P*T*T
      Td = (240.97*Td_tmp)/(17.502-Td_tmp) 'Buck (1981) Eq. (2a, 3a, & 6) and Leuning (2004) Eq. (6.23)

      diag_irga_tmp = IIF ((diag_irga <> NAN) AND (diag_irga <> -1),diag_irga,&h4ffefb)
      diag_irga_aggregate = diag_irga_aggregate OR diag_irga_tmp

      'Extract the twenty two flags from the gas analyzer diagnostic word.
      For i = 1 To 22
        diag_bits_irga(i) = diag_irga_tmp AND &h1
        diag_irga_tmp = diag_irga_tmp >> 1
      Next i

      'Compute fast response air temperature from sonic temperature and EC150 vapor density.
      Tc = Ts_absolute/(1+0.32*H2O*R*Ts_absolute/(amb_press*18.02)) 'Kaimal and Gaynor (1991) Eq. (3).

      'Compute the molar mixing ratio of CO2 and H2O.
      divisor = (amb_press/(R*Tc))-(H2O/18.02)
      Xc = CO2/(0.044*divisor)
      Xv = H2O/(0.01802*divisor)

      'Convert the fast response air temperature to degrees C.
      Tc = Tc-273.15

      'Filter data in the covariance instruction if the EC150 w/ CSAT3A sonic head reports bad data.
      irga_disable_f = ( CO2_sig_strgth < CO2_SIG_STRGTH_THRESHOLD ) OR ( H2O_sig_strgth < H2O_SIG_STRGTH_THRESHOLD ) OR (diag_irga <> 0 )

      'Load the arrays that hold the input data for the covariance instructions.
      cov_array_cs(1,1) = CO2
      Move (cov_array_cs(1,2),3,Ux,3)
      cov_array_cs(2,1) = H2O
      Move (cov_array_cs(2,2),3,Ux,3)
      cov_array_cs(3,1) = Tc
      Move (cov_array_cs(3,2),3,Ux,3)
      CallTable comp_cov_cs
      If ( comp_cov_cs.Output(1,1) ) Then
        GetRecord (CO2_stdev,comp_cov_cs,1)

        rho_d_mean = (amb_press_mean/((Tc_mean+273.15)*RD))-(H2O_mean*MU_WPL)
        Cp = 1004.67*(1+0.84*(0.622*H2O_mean*RV*(Tc_mean+273.15)/amb_press_mean)) 'Stull (1989)
        rho_a_mean = (rho_d_mean+H2O_mean)/1000
        Lv = 2501-(2.37*Tc_mean) 'Stull (1989)

        'Compute online fluxes.
        Fc_irga = CO2_Uz_cov
        LE_irga = Lv*H2O_Uz_cov

        'Compute the standard deviation from the variance.
        CO2_stdev = SQR (CO2_stdev)
        H2O_stdev = SQR (H2O_stdev)
        Tc_stdev = SQR (Tc_stdev)

        sigma_wpl = H2O_mean/rho_d_mean

        'EC150 Webb et al. (1980) term for carbon dioxide Eq. (24).
        CO2_wpl_LE = MU_WPL*CO2_mean/rho_d_mean*H2O_Uz_cov
        CO2_wpl_H = (1+(MU_WPL*sigma_wpl))*CO2_mean/(Tc_mean+273.15)*Tc_Uz_cov
        Fc_wpl = Fc_irga+CO2_wpl_LE+CO2_wpl_H

        'EC150 Webb et al. (1980) term for water vapor Eq. (25).
        H2O_wpl_LE = MU_WPL*sigma_wpl*LE_irga
        H2O_wpl_H = (1+(MU_WPL*sigma_wpl))*H2O_mean/(Tc_mean+273.15)*Lv*Tc_Uz_cov
        LE_wpl = LE_irga+H2O_wpl_LE+H2O_wpl_H
      EndIf
      '*** End of EC150 processing ***


      '*** Beginning of sonic sensible heat, momentum, and sensible heat flux processing ***
      If ( comp_cov_3d.Output(1,1) ) Then
        'CSAT3(A) sensible heat flux using sonic temperature.
        Hs = rho_a_mean*Cp*Ts_Uz_cov               'Air density computed from EC150.

        'CSAT3(A) momentum flux.
        tau = rho_a_mean*tau                       'Air density computed from EC150.

        'Sensible heat flux using sonic temperature corrected for water vapor measured by the EC150.
        Hc = rho_a_mean*Cp*Tc_Uz_cov               'Air density computed from EC150.
      EndIf
      '*** End of sensible heat flux processing ***


      CallTable flux
      If ( flux.Output(1,1) ) Then
        diag_sonic_aggregate = 0
        diag_irga_aggregate = 0
      EndIf

      slowsequence_disable_f = TRUE
      If ( slowsequence_finished_f ) Then
        slowsequence_finished_f = FALSE
        slowsequence_disable_f = FALSE
      EndIf
    Else
      scan_count += 1
    EndIf

    CallTable diagnostic
    process_time = Status.ProcessTime(1,1)
    buff_depth = Status.BuffDepth(1,1)
 

    '*** Beginning of EC150 w/ CSAT3A sonic head measurements ***
    EC100 (sonic_irga_raw(1),EC100_SDM_ADDR,1)
    '*** End of EC150 w/ CSAT3A sonic head measurements ***
  NextScan


SlowSequence

  Scan (5,Sec,3,0)
    sec_since_last_cmd = Timer (1,Sec,4)

    'Measure battery voltage.
    Battery (batt_volt)

    'measure CNR4 LW and SW upper and lower sensors
    VoltDiff (cnr4(),4,mV200C,U1,True ,0,60,cnr4_mult(),0)
    ' measure CNR4 temperature
      Resistance (cnr4_res,1,mV200,U11,U9,1,1000,True ,True ,0,60,1.0,0)
      cnr4_rs_r0=cnr4_res/100.
      cnr4_T_C= (-cnr4_alpha + SQR(cnr4_alpha^2-4.*cnr4_beta*(-cnr4_rs_r0+1)))/(2.*cnr4_beta)
      
    


    'Update CPU configuration file if sonic azimuth has changed.
    If ( sonic_azimuth_prev <> sonic_azimuth ) Then
      Erase (curr_value_str)
      Erase (prev_value_str)
      Erase (err_message_str)
      curr_value_str = sonic_azimuth
      prev_value_str = sonic_azimuth_prev
      err_message_str = "Sonic Azimuth was changed and saved."
      CallTable sys_log

      sonic_azimuth_prev = sonic_azimuth
      sys_conf_var(1) = sonic_azimuth
      Calfile (sys_conf_var(1),2,"CPU:sys_conf_var.dat",0)
    EndIf


    'Update system variable file if manual IRGA power control status has changed.
    If ( irga_off_flg_prev <> irga_off_flg ) Then
      Erase (curr_value_str)
      Erase (prev_value_str)
      Erase (err_message_str)
      If ( irga_off_flg ) Then
        curr_value_str = "IRGA off"
        prev_value_str = "IRGA on"
      Else
        curr_value_str = "IRGA on"
        prev_value_str = "IRGA off"
      EndIf
      err_message_str = "IRGA was manually turned on/off."
      CallTable sys_log

      irga_off_flg_prev = irga_off_flg
      sys_conf_var(2) = irga_off_flg
      Calfile (sys_conf_var(1),2,"CPU:sys_conf_var.dat",0)

      If ( irga_off_flg ) Then
        sec_since_last_cmd = Timer (1,Sec,2)
        irga_power_f = TRUE
        power_array(1,2) = 1 'Turn off IRGA.
      Else
        sec_since_last_cmd = Timer (1,Sec,2)
        irga_power_f = TRUE
        power_array(1,2) = 0 'Turn on IRGA.
      EndIf
    EndIf


    '*** Beginning of system power control ***
    If ( (batt_volt < SYSTEM_PWR_OFF_SET_PT) AND (power_array(1,2)=0) AND (irga_off_bit = FALSE) AND (irga_startup_bit = FALSE) ) Then
      sec_since_last_cmd = Timer (1,Sec,2)
      irga_power_f = TRUE
      power_array(1,2) = 1 'Turn off IRGA.

      Erase (curr_value_str)
      Erase (prev_value_str)
      Erase (err_message_str)
      curr_value_str = batt_volt
      err_message_str = "IRGA turned off; low system battery voltage."
      CallTable sys_log
    ElseIf ( (batt_volt > SYSTEM_PWR_OFF_SET_PT+SYSTEM_PWR_DEAD_BAND_WIDTH) AND (sec_since_last_cmd > 10) AND (irga_off_bit = TRUE) AND (irga_off_flg = FALSE) ) Then
      sec_since_last_cmd = Timer (1,Sec,2)
      irga_power_f = TRUE
      power_array(1,2) = 0 'Turn on IRGA.

      Erase (curr_value_str)
      Erase (prev_value_str)
      Erase (err_message_str)
      curr_value_str = batt_volt
      err_message_str = "IRGA turned on; nominal system battery voltage."
      CallTable sys_log
    EndIf
    '*** End of system power control ***


    slowsequence_finished_f = TRUE
  NextScan
EndProg
